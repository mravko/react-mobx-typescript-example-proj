{"version":3,"sources":["webpack:///./app/models/UserModel.ts","webpack:///./app/stores/UserStore.ts","webpack:///./app/stores/RoutingStore.ts","webpack:///./app/stores/AppStore.ts","webpack:///./app/pages/LandingPage.tsx","webpack:///./app/components/Grid/views/AddRow.tsx","webpack:///./app/components/Grid/views/Grid.tsx","webpack:///./app/models/RootModel.ts","webpack:///./app/components/MasterDetail/models/DetailModel.ts","webpack:///./app/components/Grid/models/GridModel.ts","webpack:///./app/components/MasterDetail/models/MasterDetailModel.ts","webpack:///./app/components/MasterDetail/views/DetailView.tsx","webpack:///./app/components/MasterDetail/views/MasterDetail.tsx","webpack:///./app/pages/MasterDetailPage.tsx","webpack:///./app/pages/GridOnlyPage.tsx","webpack:///./app/components/UserInfo/UserInfo.tsx","webpack:///./app/components/Menu/Menu.tsx","webpack:///./app/components/Game/models/Soul.ts","webpack:///./app/components/Game/models/Herbivore.ts","webpack:///./app/components/Game/models/CarnivoreModel.ts","webpack:///./app/components/Game/models/TimeDimensionModel.ts","webpack:///./app/components/Game/models/LocationModel.ts","webpack:///./app/components/Game/models/GameWorld.ts","webpack:///./app/components/Game/views/HerbivoreComponent.tsx","webpack:///./app/components/Game/views/CarnivoreComponent.tsx","webpack:///./app/components/Game/views/GameWorldComponent.tsx","webpack:///./app/pages/GamePage.tsx","webpack:///./main.tsx"],"names":["this","isAdmin","appStore","loggedInUser","logInUser","userName","logout","parse","location","pathname","search","replace","setQueryValue","key","value","q","queryStringValue","parseNumbers","history","push","stringify","queryValue","routingStore","userStore","pageTitle","val","document","title","setPageTitle","console","log","FormWrapper","div","props","refs","model","columns","column","onSubmit","e","preventDefault","toSave","map","c","current","addRow","Object","keys","forEach","ref","handleClick","f","className","required","type","Tr","tr","hasData","rows","r","onClick","selectRow","reactions","disposers","disposeReactions","debug","reaction","disposer","data","alert","delay","closeDetail","saveReaction","setDataValue","init","activeRow","isUserLoggedIn","filter","length","obj","id","name","surname","_private","masterModel","routeToDetail","detailsId","openDetailFromId","parseInt","fireImmediately","openDetail","detailModel","find","d","routeToDetailId","k","onChange","target","viewModel","componentWillUnmount","render","MasterDetail","MasterDetailPage","gridModel","componentDidMount","GridOnlyPage","UserInfoWrapper","loginUser","logoutUser","UserInfo","MenuWrapper","MenuItemWrapper","to","x","y","positionX","positionY","size","move","direction","getRandomInt","world","worldHeight","worldWidth","moveOn","min","max","Math","ceil","floor","random","timeAware","seconds","locations","herbivore","die","carnivore","smell","moveBySmell","i","souls","findIndex","s","splice","mostSmelly","smellBox","sort","herbivoreSmell","time","setInterval","disposeInterval","clearInterval","split","resetLocation","height","width","timeDimension","round","ltbl","index","p","randomPosition","tempLocations","j","window","struct","style","position","top","left","backgroundColor","HerbivoreComponent","CarnivoreComponent","border","vm","GameWorldComponent","GamePage","enforceActions","browserHistory","exact","path","component","getElementById"],"mappings":"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","file":"app.bbf5af70bafb12ae8d57.js","sourcesContent":["import { observable } from \"mobx\";\n\nexport default class UserModel {\n  @observable\n  userName: string;\n\n  @observable\n  isAdmin: boolean;\n\n  constructor() {\n    this.isAdmin = false;\n  }\n}\n","import { AppStore } from \"./AppStore\";\nimport { computed, action, observable } from \"mobx\";\nimport UserModel from \"app/models/UserModel\";\n\nexport default class UserStore {\n  @observable\n  loggedInUser: UserModel;\n\n  appStore: AppStore;\n\n  constructor(appStore: AppStore) {\n    this.appStore = appStore;\n  }\n\n  @computed\n  get isUserLoggedIn(): boolean {\n    return !!this.loggedInUser;\n  }\n\n  @action\n  logInUser() {\n    this.loggedInUser = new UserModel();\n    this.loggedInUser.userName = \"Marko\";\n  }\n\n  @action\n  logout() {\n    this.loggedInUser = null;\n  }\n}\n","import { RouterStore } from \"mobx-react-router\";\nimport queryString from \"queryString\";\nimport { computed } from \"mobx\";\n\nexport default class RoutingStore extends RouterStore {\n  @computed\n  get queryStringParams() {\n    return queryString.parse(this.location.pathname);\n  }\n\n  @computed\n  get queryStringValue() {\n    return this.location.search.replace(\"?\", \"\");\n  }\n\n  setQueryValue(key: string, value: any) {\n    var q = queryString.parse(this.queryStringValue, { parseNumbers: true });\n    q[key] = value;\n    this.history.push({\n      search: `?${queryString.stringify(q)}`\n    });\n  }\n\n  queryValue(key: string): string {\n    var q = queryString.parse(this.queryStringValue, { parseNumbers: true });\n    return q[key];\n  }\n}\n","import UserStore from \"./UserStore\";\nimport { observable, reaction, action } from \"mobx\";\nimport RoutingStore from \"./RoutingStore\";\n\nexport class AppStore {\n  constructor(routingStore: RoutingStore) {\n    this.userStore = new UserStore(this);\n    this.routingStore = routingStore;\n\n    reaction(\n      () => {\n        return this.pageTitle;\n      },\n      val => {\n        document.title = val;\n      }\n    );\n  }\n\n  userStore: UserStore;\n  routingStore: RoutingStore;\n\n  @observable\n  freezeScreen: boolean;\n\n  @observable\n  pageTitle: string;\n\n  @action\n  setPageTitle(title: string) {\n    this.pageTitle = title;\n  }\n}\n\nconsole.log(\"creating appstore instance\");\nconst rs = new RoutingStore();\nconst as = new AppStore(rs);\nexport default as;\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\nimport apstore from \"app/stores/AppStore\";\n\ninterface ILandingPageProps {}\n\nconst LandingPage: React.FunctionComponent<ILandingPageProps> = () => {\n  useEffect(() => {\n    apstore.setPageTitle(\"Landing page\");\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div>Hello, this is the landing page</div>\n    </React.Fragment>\n  );\n};\n\nexport default LandingPage;\n","import * as React from \"react\";\nimport { GridModel } from \"../models/GridModel\";\nimport styled from \"styled-components\";\n\ninterface IAddRowProps {\n  model: GridModel;\n}\n\n//this function works with refs to find the\n//uncontrolled component and extract the value.\n//then it calls add row on the model with all values from all fields as props\nconst handleClick = (model, refs) => {\n  let toSave = {};\n  model.columns.map(c => {\n    toSave[c] = refs[c].current.value;\n  });\n  model.addRow(toSave);\n  Object.keys(refs).forEach(ref => {\n    refs[ref].current.value = \"\";\n  });\n};\n\nconst FormWrapper = styled.div`\n  width: 350px;\n`;\n\nconst AddRow: React.FunctionComponent<IAddRowProps> = props => {\n  let refs = {};\n  for (const column of props.model.columns) {\n    refs[column] = React.createRef();\n  }\n  return (\n    <FormWrapper>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          handleClick(props.model, refs);\n        }}\n      >\n        {props.model.columns.map(f => (\n          <div key={f} className=\"form-group mb-2\">\n            <label key={f}>{f}</label>\n            <input\n              className=\"form-control\"\n              required\n              ref={refs[f]}\n              type=\"text\"\n            ></input>\n          </div>\n        ))}\n        <button className=\"btn btn-secondary btn-lg btn-block\" type=\"submit\">\n          Add\n        </button>\n      </form>\n    </FormWrapper>\n  );\n};\n\nexport default AddRow;\n","import * as React from \"react\";\nimport AddRow from \"./AddRow\";\nimport { GridModel } from \"../models/GridModel\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\n\nexport class GridProps {\n  model: GridModel;\n}\n\nconst Tr = styled.tr`\n  :hover {\n    background-color: lightgray;\n    cursor: pointer;\n  }\n`;\n\nconst Grid: React.FunctionComponent<GridProps> = observer(props => {\n  if (!props.model.hasData) return <div>No data</div>;\n\n  return (\n    <React.Fragment>\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            {props.model.columns.map(c => (\n              <th key={c}>{c}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {props.model.rows.map(r => {\n            return (\n              <Tr onClick={() => props.model.selectRow(r)} key={r[\"id\"]}>\n                {props.model.columns.map(c => (\n                  <td key={r[c]}>{r[c]}</td>\n                ))}\n              </Tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <AddRow model={props.model}></AddRow>\n    </React.Fragment>\n  );\n});\n\nexport default Grid;\n","import { IReactionDisposer } from \"mobx\";\n\nexport default class RootModel {\n  reactions: IReactionDisposer[] = [];\n\n  disposers: Function[] = [];\n\n  disposeReactions() {\n    console.debug(\"disposing reactions\");\n    for (const reaction of this.reactions) {\n      reaction();\n    }\n    for (const disposer of this.disposers) {\n      disposer();\n    }\n  }\n}\n","import { observable, reaction, action, computed, toJS } from \"mobx\";\nimport RootModel from \"app/models/RootModel\";\n\nexport class DetailModel extends RootModel {\n  constructor(data) {\n    super();\n\n    this.data = data;\n\n    this.reactions.push(\n      reaction(\n        () => toJS(this.data),\n        () => {\n          alert(\n            `You haven't made a change for 3s. The data is saved on the server.`\n          );\n        },\n        { delay: 3000 }\n      )\n    );\n  }\n\n  saveReaction;\n\n  @observable\n  data;\n\n  @action\n  closeDetail() {\n    this.saveReaction();\n  }\n\n  @computed\n  get keys(): string[] {\n    return Object.keys(this.data);\n  }\n\n  @action\n  setDataValue(key: string, value: string) {\n    this.data[key] = value;\n  }\n}\n","import { observable, computed, action, runInAction } from \"mobx\";\nimport appStore from \"app/stores/AppStore\";\n\nexport class GridModel {\n  constructor() {\n    runInAction(() => {\n      this.data = [];\n      this.init();\n      this.activeRow = null;\n    });\n  }\n\n  @observable\n  activeRow;\n\n  @observable\n  data: any[];\n\n  @computed\n  get rows(): any[] {\n    if (!appStore.userStore.isUserLoggedIn)\n      return this.data.filter(r => r[\"_private\"] === false);\n    return this.data;\n  }\n\n  @computed\n  get columns(): string[] {\n    if (this.hasData) return Object.keys(this.data[0]);\n    else return [];\n  }\n\n  @computed\n  get hasData(): boolean {\n    return this.data.length !== 0;\n  }\n\n  @action\n  addRow(obj: any) {\n    this.data.push(obj);\n  }\n\n  @action\n  selectRow(obj: any) {\n    this.activeRow = obj;\n  }\n\n  @action\n  init() {\n    this.data = [\n      { id: 1, name: \"Marko\", surname: \"Vuckovik\", _private: false },\n      { id: 2, name: \"Salvadordalu\", surname: \"Kojetoj\", _private: false },\n      { id: 3, name: \"Butrosgali\", surname: \"Tojetoj\", _private: false },\n      { id: 4, name: \"Tos\", surname: \"Tkajbombata\", _private: true }\n    ];\n  }\n}\n","import { observable, reaction, action, runInAction } from \"mobx\";\nimport { DetailModel } from \"./DetailModel\";\nimport { GridModel } from \"app/components/Grid/models/GridModel\";\nimport appStore from \"app/stores/AppStore\";\nimport RootModel from \"app/models/RootModel\";\n\nexport class MasterDetailModel extends RootModel {\n  constructor() {\n    super();\n\n    runInAction(() => {\n      this.masterModel = new GridModel();\n    });\n\n    this.reactions.push(\n      reaction(\n        () => {\n          return this.masterModel.activeRow;\n        },\n        () => {\n          this.routeToDetail(this.masterModel.activeRow);\n          appStore.pageTitle = this.masterModel.activeRow[\"name\"];\n        }\n      )\n    );\n\n    this.reactions.push(\n      reaction(\n        () => appStore.routingStore.queryStringValue,\n        () => {\n          const detailsId = appStore.routingStore.queryValue(\"detailsId\");\n          this.openDetailFromId(parseInt(detailsId));\n        },\n        { fireImmediately: true }\n      )\n    );\n  }\n\n  masterModel: GridModel;\n\n  @observable\n  detailModel: DetailModel;\n\n  @action\n  openDetail(data) {\n    this.detailModel = new DetailModel(data);\n  }\n\n  @action\n  openDetailFromId(id) {\n    let data = this.masterModel.data.find(d => parseInt(d.id) === parseInt(id));\n    if (data) this.openDetail(data);\n    else this.detailModel = null;\n  }\n\n  @action\n  routeToDetailId(id) {\n    appStore.routingStore.setQueryValue(\"detailsId\", id);\n  }\n\n  @action\n  routeToDetail(data) {\n    this.routeToDetailId(data.id);\n  }\n}\n","import * as React from \"react\";\nimport { DetailModel } from \"../models/DetailModel\";\nimport { observer } from \"mobx-react\";\n\ninterface IDetailViewProps {\n  model: DetailModel;\n}\n\nconst DetailView: React.FunctionComponent<IDetailViewProps> = observer(\n  props => {\n    return (\n      <div>\n        {props.model.keys.map(k => (\n          <div key={k}>\n            <h4>{k}</h4>\n            <div>\n              <input\n                type=\"text\"\n                value={props.model.data[k]}\n                onChange={e => {\n                  props.model.setDataValue(k, e.target.value);\n                }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n\nexport default DetailView;\n","import * as React from \"react\";\nimport Grid from \"../../Grid/views/Grid\";\nimport { MasterDetailModel } from \"../models/MasterDetailModel\";\nimport DetailView from \"./DetailView\";\nimport { observer } from \"mobx-react\";\n\nexport interface IMasterDetailProps {}\n\n@observer\nexport default class MasterDetail extends React.Component<IMasterDetailProps> {\n  constructor(props) {\n    super(props);\n\n    this.viewModel = new MasterDetailModel();\n  }\n\n  viewModel: MasterDetailModel;\n\n  componentWillUnmount() {\n    this.viewModel.disposeReactions();\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <Grid model={this.viewModel.masterModel}></Grid>\n        {this.viewModel.detailModel ? (\n          <DetailView model={this.viewModel.detailModel} />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MasterDetail from \"app/components/MasterDetail/views/MasterDetail\";\nimport { RouteComponentProps } from \"react-router\";\n\nexport interface IMasterDetailPageProps extends RouteComponentProps {}\n\n@observer\nexport default class MasterDetailPage extends React.Component<\n  IMasterDetailPageProps\n> {\n  public render() {\n    return <MasterDetail></MasterDetail>;\n  }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport appStore from \"app/stores/AppStore\";\nimport { RouteComponentProps } from \"react-router\";\nimport { GridModel } from \"app/components/Grid/models/GridModel\";\nimport Grid from \"app/components/Grid/views/Grid\";\n\nexport interface IGridOnlyPageProps extends RouteComponentProps {}\n\n@observer\nexport default class GridOnlyPage extends React.Component<IGridOnlyPageProps> {\n  constructor(props: IGridOnlyPageProps) {\n    super(props);\n    this.gridModel = new GridModel();\n  }\n\n  componentDidMount() {\n    appStore.setPageTitle(\"Grid only page\");\n  }\n\n  gridModel: GridModel;\n\n  public render() {\n    return (\n      <div>\n        <Grid model={this.gridModel}></Grid>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport styled from \"styled-components\";\nimport appStore from \"app/stores/AppStore\";\n\nconst UserInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: horizontal;\n`;\n\nexport interface IUserInfoProps {}\n\n@observer\nexport default class UserInfo extends React.Component<IUserInfoProps> {\n  constructor(props) {\n    super(props);\n  }\n  loginUser = () => {\n    appStore.userStore.logInUser();\n  };\n  logoutUser = () => {\n    appStore.userStore.logout();\n  };\n  public render() {\n    return (\n      <UserInfoWrapper>\n        {appStore.userStore.isUserLoggedIn ? (\n          <React.Fragment>\n            <div>{appStore.userStore.loggedInUser.userName}</div>\n            <button onClick={this.logoutUser}>Log out</button>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <div>not authenticated</div>\n            <button onClick={this.loginUser}>Log In</button>\n          </React.Fragment>\n        )}\n      </UserInfoWrapper>\n    );\n  }\n}\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport UserInfo from \"../UserInfo/UserInfo\";\n\ninterface IMenuProps {}\n\nconst MenuWrapper = styled.div`\n  display: flex;\n  flex-direction: horizontal;\n`;\n\nconst MenuItemWrapper = styled.div`\n  width: 200px;\n`;\n\nconst Menu: React.FunctionComponent<IMenuProps> = () => {\n  return (\n    <MenuWrapper>\n      <MenuItemWrapper>\n        <Link to=\"/\">Home</Link>\n      </MenuItemWrapper>\n      <MenuItemWrapper>\n        <Link to=\"/grid\">Grid only</Link>\n      </MenuItemWrapper>\n      <MenuItemWrapper>\n        <Link to=\"/master\">Master detail</Link>\n      </MenuItemWrapper>\n      <MenuItemWrapper>\n        <Link to=\"/game\">Game</Link>\n      </MenuItemWrapper>\n      <UserInfo></UserInfo>\n    </MenuWrapper>\n  );\n};\n\nexport default Menu;\n","import RootModel from \"app/models/RootModel\";\nimport { observable, runInAction, action } from \"mobx\";\nimport { GameWorldModel } from \"./GameWorld\";\n\nexport class SoulModel extends RootModel {\n  constructor(x: number, y: number, id: string) {\n    super();\n\n    runInAction(() => {\n      this.positionX = x;\n      this.positionY = y;\n      this.id = id;\n      this.size = 1;\n    });\n  }\n\n  @observable\n  id: string;\n\n  @observable\n  positionX: number;\n\n  @observable\n  positionY: number;\n\n  @observable\n  size: number;\n\n  world: GameWorldModel;\n\n  @action\n  move() {\n    console.log(\"move from soul\");\n    const direction = this.getRandomInt(1, 5);\n    if (direction == 1) {\n      //top\n      if (this.positionY + 1 < this.world.worldHeight - this.size)\n        this.positionY++;\n    } else if (direction == 2) {\n      //right\n      if (this.positionX + 1 < this.world.worldWidth - this.size)\n        this.positionX++;\n    } else if (direction == 3) {\n      //bottom\n      if (this.positionY - 1 > 1) this.positionY--;\n    } else {\n      //left\n      if (this.positionX - 1 > 1) this.positionX--;\n    }\n  }\n\n  @action\n  moveOn(positionX: number, positionY: number) {\n    this.positionX = positionX;\n    this.positionY = positionY;\n  }\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n  }\n}\n","import { SoulModel } from \"./Soul\";\nimport { TimeDimensionModel } from \"./TimeDimensionModel\";\nimport { action, reaction } from \"mobx\";\nimport { GameWorldModel } from \"./GameWorld\";\n\nexport class HerbivoreModel extends SoulModel {\n  constructor(\n    x: number,\n    y: number,\n    id: string,\n    timeAware: TimeDimensionModel,\n    world: GameWorldModel\n  ) {\n    super(x, y, id);\n    this.world = world;\n\n    this.disposers.push(\n      reaction(\n        () => {\n          return timeAware.seconds;\n        },\n        (val: number) => {\n          if (val % 2 === 0) this.move();\n        }\n      )\n    );\n  }\n\n  @action\n  move() {\n    var location = this.world.locations[`${this.positionY}_${this.positionX}`];\n\n    if (location) {\n      location.herbivore = null;\n    }\n\n    super.move();\n\n    location = this.world.locations[`${this.positionY}_${this.positionX}`];\n    if (location) {\n      location.herbivore = this;\n    }\n  }\n\n  @action\n  die() {\n    this.disposeReactions();\n  }\n}\n","import { SoulModel } from \"./Soul\";\nimport { TimeDimensionModel } from \"./TimeDimensionModel\";\nimport { action, reaction } from \"mobx\";\nimport { GameWorldModel } from \"./GameWorld\";\nimport { LocationModel } from \"./LocationModel\";\n\nexport class CarnivoreModel extends SoulModel {\n  constructor(\n    x: number,\n    y: number,\n    id: string,\n    timeAware: TimeDimensionModel,\n    world: GameWorldModel\n  ) {\n    super(x, y, id);\n    this.world = world;\n\n    this.disposers.push(\n      reaction(\n        () => {\n          return timeAware.seconds;\n        },\n        () => {\n          this.move();\n        }\n      )\n    );\n  }\n\n  @action\n  move() {\n    let location = this.world.locations[`${this.positionY}_${this.positionX}`];\n    if (location) {\n      location.carnivore = null;\n    }\n    let smell = this.moveBySmell();\n    if (smell != null) {\n      super.moveOn(smell.positionX, smell.positionY);\n    } else {\n      super.move();\n    }\n    location = this.world.locations[`${this.positionY}_${this.positionX}`];\n    if (location) {\n      location.carnivore = this;\n      if (location.herbivore != null) {\n        console.log(\"eating\", this, location.herbivore);\n        let i = this.world.souls.findIndex(s => s.id === location.herbivore.id);\n        if (i !== -1 && this.world.souls[i]) {\n          location.herbivore.die();\n          location.herbivore = null;\n          this.world.souls.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  get smellBox(): any[] {\n    return [\n      this.world.locations[`${this.positionY - 1}_${this.positionX}`],\n      this.world.locations[`${this.positionY + 1}_${this.positionX}`],\n      this.world.locations[`${this.positionY - 1}_${this.positionX - 1}`],\n      this.world.locations[`${this.positionY}_${this.positionX - 1}`],\n      this.world.locations[`${this.positionY + 1}_${this.positionX - 1}`],\n      this.world.locations[`${this.positionY - 1}_${this.positionX + 1}`],\n      this.world.locations[`${this.positionY}_${this.positionX + 1}`],\n      this.world.locations[`${this.positionY + 1}_${this.positionX + 1}`],\n\n      this.world.locations[`${this.positionY - 2}_${this.positionX}`],\n      this.world.locations[`${this.positionY + 2}_${this.positionX}`],\n      this.world.locations[`${this.positionY - 2}_${this.positionX - 1}`],\n      this.world.locations[`${this.positionY + 2}_${this.positionX - 1}`],\n      this.world.locations[`${this.positionY - 2}_${this.positionX + 1}`],\n      this.world.locations[`${this.positionY + 2}_${this.positionX + 1}`],\n      this.world.locations[`${this.positionY - 2}_${this.positionX - 2}`],\n      this.world.locations[`${this.positionY + 2}_${this.positionX - 2}`],\n      this.world.locations[`${this.positionY - 2}_${this.positionX + 2}`],\n      this.world.locations[`${this.positionY + 2}_${this.positionX + 2}`]\n    ];\n  }\n\n  moveBySmell(): LocationModel {\n    const mostSmelly = this.smellBox.sort(x => x.herbivoreSmell)[0];\n    if (mostSmelly.herbivoreSmell == 0) return null;\n    else {\n      console.log(\"moving by smell\", mostSmelly);\n      return mostSmelly as LocationModel;\n    }\n  }\n}\n","import RootModel from \"app/models/RootModel\";\nimport { observable, runInAction } from \"mobx\";\nexport class TimeDimensionModel extends RootModel {\n  constructor() {\n    super();\n\n    runInAction(() => {\n      this.seconds = 0;\n    });\n\n    this.time = setInterval(() => {\n      runInAction(() => {\n        this.seconds++;\n      });\n    }, 100);\n\n    this.disposers.push(this.disposeInterval);\n  }\n\n  time;\n\n  disposeInterval() {\n    this.time && clearInterval(this.time);\n  }\n\n  @observable\n  seconds: number;\n}\n","import { observable, action, reaction, computed } from \"mobx\";\nimport { HerbivoreModel } from \"./Herbivore\";\nimport { CarnivoreModel } from \"./CarnivoreModel\";\nimport RootModel from \"app/models/RootModel\";\nimport { TimeDimensionModel } from \"./TimeDimensionModel\";\n\nexport class LocationModel extends RootModel {\n  constructor(id: string, timeAware: TimeDimensionModel) {\n    super();\n    this.id = id;\n    this.herbivoreSmell = 0;\n    this.disposers.push(\n      reaction(\n        () => {\n          return timeAware.seconds;\n        },\n        () => {\n          if (this.herbivore) {\n            this.herbivoreSmell = 100;\n          } else {\n            this.herbivoreSmell = this.herbivoreSmell - 25;\n            if (this.herbivoreSmell < 0) this.herbivoreSmell = 0;\n          }\n        }\n      )\n    );\n  }\n\n  @computed\n  get positionX(): number {\n    return parseInt(this.id.split(\"_\")[1]);\n  }\n\n  @computed\n  get positionY(): number {\n    return parseInt(this.id.split(\"_\")[0]);\n  }\n\n  id: string;\n\n  @observable\n  carnivore: CarnivoreModel;\n\n  @observable\n  herbivore: HerbivoreModel;\n\n  @observable\n  herbivoreSmell: number;\n\n  @action\n  resetLocation() {\n    this.carnivore = null;\n    this.herbivore = null;\n  }\n}\n","import RootModel from \"app/models/RootModel\";\nimport { observable, action, runInAction, extendObservable } from \"mobx\";\nimport { HerbivoreModel } from \"./Herbivore\";\nimport { CarnivoreModel } from \"./CarnivoreModel\";\nimport { SoulModel } from \"./Soul\";\nimport { TimeDimensionModel } from \"./TimeDimensionModel\";\nimport { LocationModel } from \"./LocationModel\";\n\nexport class GameWorldModel extends RootModel {\n  constructor(height: number, width: number) {\n    super();\n    runInAction(() => {\n      this.worldHeight = height;\n      this.worldWidth = width;\n      this.souls = [];\n      this.timeDimension = new TimeDimensionModel();\n      this.locations = {};\n    });\n  }\n  @observable.struct\n  worldWidth: number;\n\n  @observable.struct\n  worldHeight: number;\n\n  @observable\n  souls: SoulModel[];\n\n  @observable\n  timeDimension: TimeDimensionModel;\n\n  get randomPosition(): {\n    x: number;\n    y: number;\n  } {\n    let x = Math.random();\n    x = Math.round(x * this.worldWidth);\n    let y = Math.random();\n    y = Math.round(y * this.worldWidth);\n    return { x, y };\n  }\n\n  @observable\n  locations;\n\n  @action\n  ltbl() {\n    for (let index = 0; index < 500; index++) {\n      const p = this.randomPosition;\n      this.souls.push(\n        new HerbivoreModel(p.x, p.y, `h${index}`, this.timeDimension, this)\n      );\n    }\n\n    for (let index = 0; index < 20; index++) {\n      const p = this.randomPosition;\n      const c = new CarnivoreModel(\n        p.x,\n        p.y,\n        `c${index}`,\n        this.timeDimension,\n        this\n      );\n\n      this.souls.push(c);\n    }\n\n    let tempLocations = {};\n    for (let i = 0; i <= this.worldHeight; i++) {\n      for (let j = 0; j <= this.worldWidth; j++) {\n        tempLocations[`${i}_${j}`] = new LocationModel(\n          `${i}_${j}`,\n          this.timeDimension\n        );\n      }\n    }\n    extendObservable(this.locations, tempLocations);\n\n    window[\"world\"] = this;\n  }\n}\n","import * as React from \"react\";\nimport { HerbivoreModel } from \"../models/Herbivore\";\nimport { observer } from \"mobx-react\";\n\nexport interface IHerbivoreComponentProps {\n  viewModel: HerbivoreModel;\n}\n\n@observer\nexport default class HerbivoreComponent extends React.Component<\n  IHerbivoreComponentProps\n> {\n  public render() {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: this.props.viewModel.positionY,\n          left: this.props.viewModel.positionX,\n          height: this.props.viewModel.size,\n          width: this.props.viewModel.size,\n          backgroundColor: \"green\"\n        }}\n      ></div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { CarnivoreModel } from \"../models/CarnivoreModel\";\nimport { observer } from \"mobx-react\";\n\nexport interface ICarnivoreComponentProps {\n  viewModel: CarnivoreModel;\n}\n\n@observer\nexport default class CarnivoreComponent extends React.Component<\n  ICarnivoreComponentProps\n> {\n  public render() {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: this.props.viewModel.positionY,\n          left: this.props.viewModel.positionX,\n          height: this.props.viewModel.size,\n          width: this.props.viewModel.size,\n          backgroundColor: \"red\"\n        }}\n      ></div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { GameWorldModel } from \"../models/GameWorld\";\nimport HerbivoreComponent from \"./HerbivoreComponent\";\nimport { observer } from \"mobx-react\";\nimport { HerbivoreModel } from \"../models/Herbivore\";\nimport { CarnivoreModel } from \"../models/CarnivoreModel\";\nimport CarnivoreComponent from \"./CarnivoreComponent\";\n\nexport interface IGameWorldProps {}\n\n@observer\nexport default class GameWorldComponent extends React.Component<\n  IGameWorldProps\n> {\n  viewModel: GameWorldModel;\n\n  constructor(props) {\n    super(props);\n\n    this.viewModel = new GameWorldModel(100, 100);\n    this.viewModel.ltbl();\n  }\n\n  public render() {\n    return (\n      <div\n        style={{\n          position: \"relative\",\n          height: this.viewModel.worldHeight,\n          width: this.viewModel.worldWidth,\n          border: \"1px solid green\"\n        }}\n      >\n        {this.viewModel.souls.map(vm => {\n          if (vm instanceof HerbivoreModel)\n            return (\n              <HerbivoreComponent\n                key={vm.id}\n                viewModel={vm as HerbivoreModel}\n              ></HerbivoreComponent>\n            );\n          else\n            return (\n              <CarnivoreComponent\n                key={vm.id}\n                viewModel={vm as CarnivoreModel}\n              ></CarnivoreComponent>\n            );\n        })}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport appStore from \"app/stores/AppStore\";\nimport GameWorldComponent from \"app/components/Game/views/GameWorldComponent\";\n\nexport interface IGamePageProps {}\n\n@observer\nexport default class GamePage extends React.Component<IGamePageProps> {\n  constructor(props: IGamePageProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    appStore.setPageTitle(\"Game page\");\n  }\n\n  public render() {\n    return <GameWorldComponent></GameWorldComponent>;\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { configure } from \"mobx\";\nimport { createBrowserHistory } from \"history\";\nimport { Router, Route } from \"react-router\";\nimport LandingPage from \"./app/pages/LandingPage\";\nimport MasterDetailPage from \"app/pages/MasterDetailPage\";\nimport GridOnlyPage from \"app/pages/GridOnlyPage\";\nimport Menu from \"app/components/Menu/Menu\";\nimport { syncHistoryWithStore } from \"mobx-react-router\";\nimport appStore from \"app/stores/AppStore\";\nimport GamePage from \"app/pages/GamePage\";\n\nconfigure({ enforceActions: \"always\" });\n\nconst browserHistory = createBrowserHistory();\nconst history = syncHistoryWithStore(browserHistory, appStore.routingStore);\n\n// render react DOM\nconst App = ({ history }) => (\n  <React.Fragment>\n    <Router history={history}>\n      <Menu></Menu>\n      <Route exact path=\"/\" component={LandingPage} />\n      <Route path=\"/grid\" component={GridOnlyPage} />\n      <Route path=\"/master\" component={MasterDetailPage} />\n      <Route path=\"/game\" component={GamePage} />\n    </Router>\n  </React.Fragment>\n);\n\n// render react DOM\nReactDOM.render(<App history={history} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}